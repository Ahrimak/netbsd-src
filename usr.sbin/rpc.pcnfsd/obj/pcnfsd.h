/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _PCNFSD_H_RPCGEN
#define _PCNFSD_H_RPCGEN

#define RPCGEN_VERSION	199506

#include <rpc/rpc.h>

#define IDENTLEN 32
#define PASSWORDLEN 64
#define CLIENTLEN 64
#define PRINTERNAMELEN 64
#define USERNAMELEN 64
#define SPOOLNAMELEN 64
#define OPTIONSLEN 64
#define SPOOLDIRLEN 255
#define EXTRAGIDLEN 16
#define HOMEDIRLEN 255
#define COMMENTLEN 255
#define PRINTJOBIDLEN 255
#define PRLISTMAX 32
#define PRQUEUEMAX 128
#define FACILITIESMAX 32
#define MESSAGELEN 512

typedef char *ident;

typedef char *message;

typedef char *password;

typedef char *client;

typedef char *printername;

typedef char *username;

typedef char *comment;

typedef char *spoolname;

typedef char *printjobid;

typedef char *homedir;

typedef char *options;

enum arstat {
	AUTH_RES_OK = 0,
	AUTH_RES_FAKE = 1,
	AUTH_RES_FAIL = 2
};
typedef enum arstat arstat;

enum alrstat {
	ALERT_RES_OK = 0,
	ALERT_RES_FAIL = 1
};
typedef enum alrstat alrstat;

enum pirstat {
	PI_RES_OK = 0,
	PI_RES_NO_SUCH_PRINTER = 1,
	PI_RES_FAIL = 2
};
typedef enum pirstat pirstat;

enum pcrstat {
	PC_RES_OK = 0,
	PC_RES_NO_SUCH_PRINTER = 1,
	PC_RES_NO_SUCH_JOB = 2,
	PC_RES_NOT_OWNER = 3,
	PC_RES_FAIL = 4
};
typedef enum pcrstat pcrstat;

enum psrstat {
	PS_RES_OK = 0,
	PS_RES_ALREADY = 1,
	PS_RES_NULL = 2,
	PS_RES_NO_FILE = 3,
	PS_RES_FAIL = 4
};
typedef enum psrstat psrstat;

enum mapreq {
	MAP_REQ_UID = 0,
	MAP_REQ_GID = 1,
	MAP_REQ_UNAME = 2,
	MAP_REQ_GNAME = 3
};
typedef enum mapreq mapreq;

enum maprstat {
	MAP_RES_OK = 0,
	MAP_RES_UNKNOWN = 1,
	MAP_RES_DENIED = 2
};
typedef enum maprstat maprstat;

struct auth_args {
	ident id;
	password pw;
};
typedef struct auth_args auth_args;

struct auth_results {
	arstat stat;
	u_int uid;
	u_int gid;
};
typedef struct auth_results auth_results;

struct pr_init_args {
	client system;
	printername pn;
};
typedef struct pr_init_args pr_init_args;

struct pr_init_results {
	pirstat stat;
	spoolname dir;
};
typedef struct pr_init_results pr_init_results;

struct pr_start_args {
	client system;
	printername pn;
	username user;
	spoolname file;
	options opts;
};
typedef struct pr_start_args pr_start_args;

struct pr_start_results {
	psrstat stat;
};
typedef struct pr_start_results pr_start_results;

struct v2_info_args {
	comment vers;
	comment cm;
};
typedef struct v2_info_args v2_info_args;

struct v2_info_results {
	comment vers;
	comment cm;
	struct {
		unsigned int facilities_len;
		int *facilities_val;
	} facilities;
};
typedef struct v2_info_results v2_info_results;

struct v2_pr_init_args {
	client system;
	printername pn;
	comment cm;
};
typedef struct v2_pr_init_args v2_pr_init_args;

struct v2_pr_init_results {
	pirstat stat;
	spoolname dir;
	comment cm;
};
typedef struct v2_pr_init_results v2_pr_init_results;

struct v2_pr_start_args {
	client system;
	printername pn;
	username user;
	spoolname file;
	options opts;
	int copies;
	comment cm;
};
typedef struct v2_pr_start_args v2_pr_start_args;

struct v2_pr_start_results {
	psrstat stat;
	printjobid id;
	comment cm;
};
typedef struct v2_pr_start_results v2_pr_start_results;

typedef struct pr_list_item *pr_list;

struct pr_list_item {
	printername pn;
	printername device;
	client remhost;
	comment cm;
	pr_list pr_next;
};
typedef struct pr_list_item pr_list_item;

struct v2_pr_list_results {
	comment cm;
	pr_list printers;
};
typedef struct v2_pr_list_results v2_pr_list_results;

struct v2_pr_queue_args {
	printername pn;
	client system;
	username user;
	bool_t just_mine;
	comment cm;
};
typedef struct v2_pr_queue_args v2_pr_queue_args;

typedef struct pr_queue_item *pr_queue;

struct pr_queue_item {
	int position;
	printjobid id;
	comment size;
	comment status;
	client system;
	username user;
	spoolname file;
	comment cm;
	pr_queue pr_next;
};
typedef struct pr_queue_item pr_queue_item;

struct v2_pr_queue_results {
	pirstat stat;
	comment cm;
	bool_t just_yours;
	int qlen;
	int qshown;
	pr_queue jobs;
};
typedef struct v2_pr_queue_results v2_pr_queue_results;

struct v2_pr_cancel_args {
	printername pn;
	client system;
	username user;
	printjobid id;
	comment cm;
};
typedef struct v2_pr_cancel_args v2_pr_cancel_args;

struct v2_pr_cancel_results {
	pcrstat stat;
	comment cm;
};
typedef struct v2_pr_cancel_results v2_pr_cancel_results;

struct v2_pr_status_args {
	printername pn;
	comment cm;
};
typedef struct v2_pr_status_args v2_pr_status_args;

struct v2_pr_status_results {
	pirstat stat;
	bool_t avail;
	bool_t printing;
	int qlen;
	bool_t needs_operator;
	comment status;
	comment cm;
};
typedef struct v2_pr_status_results v2_pr_status_results;

struct v2_pr_admin_args {
	client system;
	username user;
	printername pn;
	comment cm;
};
typedef struct v2_pr_admin_args v2_pr_admin_args;

struct v2_pr_admin_results {
	pirstat stat;
	comment cm;
};
typedef struct v2_pr_admin_results v2_pr_admin_results;

struct v2_pr_requeue_args {
	printername pn;
	client system;
	username user;
	printjobid id;
	int qpos;
	comment cm;
};
typedef struct v2_pr_requeue_args v2_pr_requeue_args;

struct v2_pr_requeue_results {
	pcrstat stat;
	comment cm;
};
typedef struct v2_pr_requeue_results v2_pr_requeue_results;

struct v2_pr_hold_args {
	printername pn;
	client system;
	username user;
	printjobid id;
	comment cm;
};
typedef struct v2_pr_hold_args v2_pr_hold_args;

struct v2_pr_hold_results {
	pcrstat stat;
	comment cm;
};
typedef struct v2_pr_hold_results v2_pr_hold_results;

struct v2_pr_release_args {
	printername pn;
	client system;
	username user;
	printjobid id;
	comment cm;
};
typedef struct v2_pr_release_args v2_pr_release_args;

struct v2_pr_release_results {
	pcrstat stat;
	comment cm;
};
typedef struct v2_pr_release_results v2_pr_release_results;

typedef struct mapreq_arg_item *mapreq_arg;

struct mapreq_arg_item {
	mapreq req;
	int id;
	username name;
	mapreq_arg mapreq_next;
};
typedef struct mapreq_arg_item mapreq_arg_item;

typedef struct mapreq_res_item *mapreq_res;

struct mapreq_res_item {
	mapreq req;
	maprstat stat;
	int id;
	username name;
	mapreq_res mapreq_next;
};
typedef struct mapreq_res_item mapreq_res_item;

struct v2_mapid_args {
	comment cm;
	mapreq_arg req_list;
};
typedef struct v2_mapid_args v2_mapid_args;

struct v2_mapid_results {
	comment cm;
	mapreq_res res_list;
};
typedef struct v2_mapid_results v2_mapid_results;

struct v2_auth_args {
	client system;
	ident id;
	password pw;
	comment cm;
};
typedef struct v2_auth_args v2_auth_args;

struct v2_auth_results {
	arstat stat;
	u_int uid;
	u_int gid;
	struct {
		unsigned int gids_len;
		u_int *gids_val;
	} gids;
	homedir home;
	int def_umask;
	comment cm;
};
typedef struct v2_auth_results v2_auth_results;

struct v2_alert_args {
	client system;
	printername pn;
	username user;
	message msg;
};
typedef struct v2_alert_args v2_alert_args;

struct v2_alert_results {
	alrstat stat;
	comment cm;
};
typedef struct v2_alert_results v2_alert_results;
#if RPC_SVC
 static void _msgout(const char *);
 void msg_out(msg) const char *msg; {_msgout(msg);}
#endif
#if 1
 extern void msg_out(const char *);
#endif
#if RPC_SVC
#define main mymain
#endif

__BEGIN_DECLS
bool_t xdr_ident(XDR *, ident *);
bool_t xdr_message(XDR *, message *);
bool_t xdr_password(XDR *, password *);
bool_t xdr_client(XDR *, client *);
bool_t xdr_printername(XDR *, printername *);
bool_t xdr_username(XDR *, username *);
bool_t xdr_comment(XDR *, comment *);
bool_t xdr_spoolname(XDR *, spoolname *);
bool_t xdr_printjobid(XDR *, printjobid *);
bool_t xdr_homedir(XDR *, homedir *);
bool_t xdr_options(XDR *, options *);
bool_t xdr_arstat(XDR *, arstat *);
bool_t xdr_alrstat(XDR *, alrstat *);
bool_t xdr_pirstat(XDR *, pirstat *);
bool_t xdr_pcrstat(XDR *, pcrstat *);
bool_t xdr_psrstat(XDR *, psrstat *);
bool_t xdr_mapreq(XDR *, mapreq *);
bool_t xdr_maprstat(XDR *, maprstat *);
bool_t xdr_auth_args(XDR *, auth_args *);
bool_t xdr_auth_results(XDR *, auth_results *);
bool_t xdr_pr_init_args(XDR *, pr_init_args *);
bool_t xdr_pr_init_results(XDR *, pr_init_results *);
bool_t xdr_pr_start_args(XDR *, pr_start_args *);
bool_t xdr_pr_start_results(XDR *, pr_start_results *);
bool_t xdr_v2_info_args(XDR *, v2_info_args *);
bool_t xdr_v2_info_results(XDR *, v2_info_results *);
bool_t xdr_v2_pr_init_args(XDR *, v2_pr_init_args *);
bool_t xdr_v2_pr_init_results(XDR *, v2_pr_init_results *);
bool_t xdr_v2_pr_start_args(XDR *, v2_pr_start_args *);
bool_t xdr_v2_pr_start_results(XDR *, v2_pr_start_results *);
bool_t xdr_pr_list(XDR *, pr_list *);
bool_t xdr_pr_list_item(XDR *, pr_list_item *);
bool_t xdr_v2_pr_list_results(XDR *, v2_pr_list_results *);
bool_t xdr_v2_pr_queue_args(XDR *, v2_pr_queue_args *);
bool_t xdr_pr_queue(XDR *, pr_queue *);
bool_t xdr_pr_queue_item(XDR *, pr_queue_item *);
bool_t xdr_v2_pr_queue_results(XDR *, v2_pr_queue_results *);
bool_t xdr_v2_pr_cancel_args(XDR *, v2_pr_cancel_args *);
bool_t xdr_v2_pr_cancel_results(XDR *, v2_pr_cancel_results *);
bool_t xdr_v2_pr_status_args(XDR *, v2_pr_status_args *);
bool_t xdr_v2_pr_status_results(XDR *, v2_pr_status_results *);
bool_t xdr_v2_pr_admin_args(XDR *, v2_pr_admin_args *);
bool_t xdr_v2_pr_admin_results(XDR *, v2_pr_admin_results *);
bool_t xdr_v2_pr_requeue_args(XDR *, v2_pr_requeue_args *);
bool_t xdr_v2_pr_requeue_results(XDR *, v2_pr_requeue_results *);
bool_t xdr_v2_pr_hold_args(XDR *, v2_pr_hold_args *);
bool_t xdr_v2_pr_hold_results(XDR *, v2_pr_hold_results *);
bool_t xdr_v2_pr_release_args(XDR *, v2_pr_release_args *);
bool_t xdr_v2_pr_release_results(XDR *, v2_pr_release_results *);
bool_t xdr_mapreq_arg(XDR *, mapreq_arg *);
bool_t xdr_mapreq_arg_item(XDR *, mapreq_arg_item *);
bool_t xdr_mapreq_res(XDR *, mapreq_res *);
bool_t xdr_mapreq_res_item(XDR *, mapreq_res_item *);
bool_t xdr_v2_mapid_args(XDR *, v2_mapid_args *);
bool_t xdr_v2_mapid_results(XDR *, v2_mapid_results *);
bool_t xdr_v2_auth_args(XDR *, v2_auth_args *);
bool_t xdr_v2_auth_results(XDR *, v2_auth_results *);
bool_t xdr_v2_alert_args(XDR *, v2_alert_args *);
bool_t xdr_v2_alert_results(XDR *, v2_alert_results *);
__END_DECLS

#define PCNFSDPROG 150001
#define PCNFSDVERS 1
#define PCNFSD_NULL 0
#define PCNFSD_AUTH 1
#define PCNFSD_PR_INIT 2
#define PCNFSD_PR_START 3
#define PCNFSDV2 2
#define PCNFSD2_NULL 0
#define PCNFSD2_INFO 1
#define PCNFSD2_PR_INIT 2
#define PCNFSD2_PR_START 3
#define PCNFSD2_PR_LIST 4
#define PCNFSD2_PR_QUEUE 5
#define PCNFSD2_PR_STATUS 6
#define PCNFSD2_PR_CANCEL 7
#define PCNFSD2_PR_ADMIN 8
#define PCNFSD2_PR_REQUEUE 9
#define PCNFSD2_PR_HOLD 10
#define PCNFSD2_PR_RELEASE 11
#define PCNFSD2_MAPID 12
#define PCNFSD2_AUTH 13
#define PCNFSD2_ALERT 14

__BEGIN_DECLS
void *pcnfsd_null_1(void *, CLIENT *);
void *pcnfsd_null_1_svc(void *, struct svc_req *);
auth_results *pcnfsd_auth_1(auth_args *, CLIENT *);
auth_results *pcnfsd_auth_1_svc(auth_args *, struct svc_req *);
pr_init_results *pcnfsd_pr_init_1(pr_init_args *, CLIENT *);
pr_init_results *pcnfsd_pr_init_1_svc(pr_init_args *, struct svc_req *);
pr_start_results *pcnfsd_pr_start_1(pr_start_args *, CLIENT *);
pr_start_results *pcnfsd_pr_start_1_svc(pr_start_args *, struct svc_req *);
void *pcnfsd2_null_2(void *, CLIENT *);
void *pcnfsd2_null_2_svc(void *, struct svc_req *);
v2_info_results *pcnfsd2_info_2(v2_info_args *, CLIENT *);
v2_info_results *pcnfsd2_info_2_svc(v2_info_args *, struct svc_req *);
v2_pr_init_results *pcnfsd2_pr_init_2(v2_pr_init_args *, CLIENT *);
v2_pr_init_results *pcnfsd2_pr_init_2_svc(v2_pr_init_args *, struct svc_req *);
v2_pr_start_results *pcnfsd2_pr_start_2(v2_pr_start_args *, CLIENT *);
v2_pr_start_results *pcnfsd2_pr_start_2_svc(v2_pr_start_args *, struct svc_req *);
v2_pr_list_results *pcnfsd2_pr_list_2(void *, CLIENT *);
v2_pr_list_results *pcnfsd2_pr_list_2_svc(void *, struct svc_req *);
v2_pr_queue_results *pcnfsd2_pr_queue_2(v2_pr_queue_args *, CLIENT *);
v2_pr_queue_results *pcnfsd2_pr_queue_2_svc(v2_pr_queue_args *, struct svc_req *);
v2_pr_status_results *pcnfsd2_pr_status_2(v2_pr_status_args *, CLIENT *);
v2_pr_status_results *pcnfsd2_pr_status_2_svc(v2_pr_status_args *, struct svc_req *);
v2_pr_cancel_results *pcnfsd2_pr_cancel_2(v2_pr_cancel_args *, CLIENT *);
v2_pr_cancel_results *pcnfsd2_pr_cancel_2_svc(v2_pr_cancel_args *, struct svc_req *);
v2_pr_admin_results *pcnfsd2_pr_admin_2(v2_pr_admin_args *, CLIENT *);
v2_pr_admin_results *pcnfsd2_pr_admin_2_svc(v2_pr_admin_args *, struct svc_req *);
v2_pr_requeue_results *pcnfsd2_pr_requeue_2(v2_pr_requeue_args *, CLIENT *);
v2_pr_requeue_results *pcnfsd2_pr_requeue_2_svc(v2_pr_requeue_args *, struct svc_req *);
v2_pr_hold_results *pcnfsd2_pr_hold_2(v2_pr_hold_args *, CLIENT *);
v2_pr_hold_results *pcnfsd2_pr_hold_2_svc(v2_pr_hold_args *, struct svc_req *);
v2_pr_release_results *pcnfsd2_pr_release_2(v2_pr_release_args *, CLIENT *);
v2_pr_release_results *pcnfsd2_pr_release_2_svc(v2_pr_release_args *, struct svc_req *);
v2_mapid_results *pcnfsd2_mapid_2(v2_mapid_args *, CLIENT *);
v2_mapid_results *pcnfsd2_mapid_2_svc(v2_mapid_args *, struct svc_req *);
v2_auth_results *pcnfsd2_auth_2(v2_auth_args *, CLIENT *);
v2_auth_results *pcnfsd2_auth_2_svc(v2_auth_args *, struct svc_req *);
v2_alert_results *pcnfsd2_alert_2(v2_alert_args *, CLIENT *);
v2_alert_results *pcnfsd2_alert_2_svc(v2_alert_args *, struct svc_req *);
__END_DECLS

#endif /* !_PCNFSD_H_RPCGEN */
