<!DOCTYPE html>
<html>
<!-- This is an automatically generated file.  Do not edit.
  	$NetBSD: inetd.8,v 1.67 2021/10/12 22:47:18 rillig Exp $
  
   Copyright (c) 1998 The NetBSD Foundation, Inc.
   All rights reserved.
  
   This code is derived from software contributed to The NetBSD Foundation
   by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
   NASA Ames Research Center.
  
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
   1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
  
   THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
   PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
   BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   POSSIBILITY OF SUCH DAMAGE.
  
   Copyright (c) 1985, 1991 The Regents of the University of California.
   All rights reserved.
  
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
   1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
   3. Neither the name of the University nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.
  
   THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
   FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
   OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
   OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
   SUCH DAMAGE.
  
       from: @(#)inetd.8       8.4 (Berkeley) 6/1/94
   -->
<head>
  <meta charset="utf-8"/>
  <link rel="stylesheet" href="../style.css" type="text/css" media="all"/>
  <title>INETD(8)</title>
</head>
<body>
<table class="head">
  <tr>
    <td class="head-ltitle">INETD(8)</td>
    <td class="head-vol">System Manager's Manual</td>
    <td class="head-rtitle">INETD(8)</td>
  </tr>
</table>
<div class="manual-text">
<section class="Sh">
<h1 class="Sh" id="NAME"><a class="permalink" href="#NAME">NAME</a></h1>
<code class="Nm">inetd</code>, <code class="Nm">inetd.conf</code> &#x2014;
<div class="Nd">internet &#x201C;super-server&#x201D;</div>
</section>
<section class="Sh">
<h1 class="Sh" id="SYNOPSIS"><a class="permalink" href="#SYNOPSIS">SYNOPSIS</a></h1>
<table class="Nm">
  <tr>
    <td><code class="Nm">inetd</code></td>
    <td>[<code class="Fl">-d</code>] [<code class="Fl">-l</code>]
      [<var class="Ar">configuration file</var>]</td>
  </tr>
</table>
</section>
<section class="Sh">
<h1 class="Sh" id="DESCRIPTION"><a class="permalink" href="#DESCRIPTION">DESCRIPTION</a></h1>
<code class="Nm">inetd</code> should be run at boot time by
  <span class="Pa">/etc/rc</span> (see
  <a class="Xr" href="../html8/rc.html">rc(8)</a>). It then opens sockets
  according to its configuration and listens for connections. When a connection
  is found on one of its sockets, it decides what service the socket corresponds
  to, and invokes a program to service the request. After the program is
  finished, it continues to listen on the socket (except in some cases which
  will be described below). Essentially, <code class="Nm">inetd</code> allows
  running one daemon to invoke several others, reducing load on the system.
<p class="Pp">The options available for <code class="Nm">inetd</code>:</p>
<dl class="Bl-tag">
  <dt><a class="permalink" href="#d"><code class="Fl" id="d">-d</code></a></dt>
  <dd>Turns on debugging and runs <code class="Nm">inetd</code> in the
      foreground.</dd>
  <dt><a class="permalink" href="#f"><code class="Fl" id="f">-f</code></a></dt>
  <dd>Runs <code class="Nm">inetd</code> in the foreground.</dd>
  <dt><a class="permalink" href="#l"><code class="Fl" id="l">-l</code></a></dt>
  <dd>Turns on libwrap connection logging.</dd>
</dl>
<p class="Pp">Upon execution, <code class="Nm">inetd</code> reads its
    configuration information from a configuration file which, by default, is
    <span class="Pa">/etc/inetd.conf</span>. The path given for this
    configuration file must be absolute, unless the <code class="Fl">-d</code>
    option is also given on the command line.</p>
<p class="Pp">Services can be specified using the legacy `positional' notation
    or the `key-values' notation described in the sections
    <a class="Sx" href="#Positional_Notation">Positional Notation</a> and
    <a class="Sx" href="#Key_Values_Notation">Key-Values Notation</a> below.</p>
<section class="Ss">
<h2 class="Ss" id="Positional_Notation"><a class="permalink" href="#Positional_Notation">Positional
  Notation</a></h2>
There must be an entry for each field of the configuration file, with entries
  for each field separated by a tab or a space. Comments are denoted by a ``#''
  at the beginning of a line (see subsection
  <a class="Sx" href="#Key_Values_Notation">Key-Values Notation</a> for defining
  comments in key-values definitions). There must be an entry for each field
  (except for one special case, described below). A positional definition is
  terminated by a newline. The fields of the configuration file are as follows:
<p class="Pp"></p>
<div class="Bd Bd-indent">
<pre>
[listen-addr:]service-spec
socket-type[:accept-filter]
protocol[,sndbuf=size][,rcvbuf=size]
wait/nowait[:max]
user[:group]
server-program
server program arguments
</pre>
</div>
<p class="Pp">The <i class="Em">listen-addr</i> parameter specifies the local
    address <code class="Nm">inetd</code> should use when listening. The single
    character &#x201C;*&#x201D; means <code class="Dv">INADDR_ANY</code>: all
    local addresses. The <i class="Em">listen-addr</i> parameter may be a host
    name, which will be resolved once, when the service definition is read from
    the config file.</p>
<p class="Pp">Note that restricted listen addresses are meaningless and ignored
    for UNIX-domain services, and are not supported for
    <i class="Em">Sun-RPC</i> services. All <i class="Em">Sun-RPC</i> services
    always listen on all interfaces.</p>
<p class="Pp">The form of the <i class="Em">service-spec</i> parameter varies
    with the service type. For Internet services, the
    <i class="Em">service-spec</i> parameter can be either the name of a service
    from <span class="Pa">/etc/services</span> or a decimal port number. For
    &#x201C;internal&#x201D; services (discussed below), the service name
    <i class="Em">must</i> be the official name of the service (that is, the
    first entry in <span class="Pa">/etc/services</span>) and not an alias for
    it.</p>
<p class="Pp">For <i class="Em">Sun-RPC</i> based services, the
    <i class="Em">service-spec</i> parameter has the form
    <i class="Em">service-name</i><code class="Li">/</code><i class="Em">version</i>.
    The service name must be a valid RPC service name from the file
    <span class="Pa">/etc/rpc</span>. The <i class="Em">version</i> on the right
    of the &#x201C;/&#x201D; is the RPC version number. This can simply be a
    single numeric argument or a range of versions. A range is bounded by the
    low version to the high version, e.g. &#x201C;rusers/1-3&#x201D;.</p>
<p class="Pp">For UNIX-domain (local) services, the
    <i class="Em">service-spec</i> parameter is the path name to listen on.</p>
<p class="Pp">The <i class="Em">service-spec</i> parameter must not begin with a
    dot. See <a class="Sx" href="#Directives">Directives</a>.</p>
<p class="Pp">The <i class="Em">socket-type</i> parameter should be one of
    &#x201C;stream&#x201D;, &#x201C;dgram&#x201D;, &#x201C;raw&#x201D;,
    &#x201C;rdm&#x201D;, or &#x201C;seqpacket&#x201D;, depending on whether the
    socket is a stream, datagram, raw, reliably delivered message, or sequenced
    packet socket.</p>
<p class="Pp">Optionally, for Internet services, an accept filter (see
    <a class="Xr" href="../html9/accept_filter.html">accept_filter(9)</a>) can
    be specified by appending a colon to <i class="Em">socket-type</i>, followed
    by the name of the desired accept filter. In this case
    <code class="Nm">inetd</code> will not see new connections for the specified
    service until the accept filter decides they are ready to be handled.</p>
<p class="Pp">The <i class="Em">protocol</i> parameter must be a valid protocol
    as given in <span class="Pa">/etc/protocols</span> or (for UNIX-domain
    services) the string &#x201C;unix&#x201D;. The most common are
    &#x201C;tcp&#x201D; and &#x201C;udp&#x201D;. For TCP and UDP, the IP version
    (4 or 6) may be specified explicitly by appending 4 or 6 to the protocol
    name. Otherwise the default version (IPv4) is used. For
    <i class="Em">Sun-RPC</i> the string &#x201C;rpc&#x201D; and a slash should
    be prepended: &#x201C;rpc/tcp&#x201D; or &#x201C;rpc/udp&#x201D;. If you
    would like to enable special support for
    <a class="Xr" href="../html8/faithd.html">faithd(8)</a>, prepend the string
    &#x201C;faith&#x201D; and a slash: &#x201C;faith/tcp6&#x201D;.</p>
<p class="Pp">In addition to the protocol, the configuration file may specify
    the send and receive socket buffer sizes for the listening socket. This is
    especially useful for TCP: the window scale factor, which is based on the
    receive socket buffer size, is advertised when the connection handshake
    occurs and thus the socket buffer size must be set on the listen socket. By
    increasing the socket buffer sizes, better TCP performance may be realized
    in some situations. The socket buffer sizes are specified by appending their
    values to the protocol specification as follows:</p>
<div class="Bd Pp Bd-indent">
<pre>
tcp,rcvbuf=16384
tcp,sndbuf=64k
tcp,rcvbuf=64k,sndbuf=1m
</pre>
</div>
<p class="Pp">A literal value may be specified, or modified using
    &#x2018;k&#x2019; to indicate kibibytes or &#x2018;m&#x2019; to indicate
    mebibytes. Socket buffer sizes may be specified for all services and
    protocols except for tcpmux services.</p>
<p class="Pp">The <i class="Em">wait/nowait</i> entry is used to tell
    <code class="Nm">inetd</code> if it should wait for the server program to
    return, or continue processing connections on the socket. If a datagram
    server reads a single datagram and connects to its peer through a different
    socket, freeing the service's socket so <code class="Nm">inetd</code> can
    receive further messages on the socket, it is said to be a
    &#x201C;multi-threaded&#x201D; server, and should use the
    &#x201C;nowait&#x201D; entry. For datagram servers which process all
    incoming datagrams on a socket and eventually time out, the server is said
    to be &#x201C;single-threaded&#x201D; and should use a &#x201C;wait&#x201D;
    entry. <a class="Xr" href="../html8/comsat.html">comsat(8)</a>
    (<a class="Xr" href="../html1/biff.html">biff(1)</a>) and
    <a class="Xr" href="../html8/ntalkd.html">ntalkd(8)</a> are both examples of
    the latter type of datagram server.
    <a class="Xr" href="../html8/tftpd.html">tftpd(8)</a> is an exception; it is
    a datagram server that establishes pseudo-connections. It must be listed as
    &#x201C;wait&#x201D; in order to avoid a race; the server reads the first
    packet, creates a new socket, and then forks and exits to allow
    <code class="Nm">inetd</code> to check for new service requests to spawn new
    servers. The optional &#x201C;max&#x201D; suffix (separated from
    &#x201C;wait&#x201D; or &#x201C;nowait&#x201D; by a dot or a colon)
    specifies the maximum number of server instances that may be spawned from
    <code class="Nm">inetd</code> within an interval of 60 seconds. When
    omitted, &#x201C;max&#x201D; defaults to 40. If it reaches this maximum
    spawn rate, <code class="Nm">inetd</code> will log the problem (via the
    syslogger using the <code class="Dv">LOG_DAEMON</code> facility and
    <code class="Dv">LOG_ERR</code> level) and stop handling the specific
    service for ten minutes.</p>
<p class="Pp">Stream servers are usually marked as &#x201C;nowait&#x201D; but if
    a single server process is to handle multiple connections, it may be marked
    as &#x201C;wait&#x201D;. The master socket will then be passed as fd 0 to
    the server, which will then need to accept the incoming connection. The
    server should eventually time out and exit when no more connections are
    active. <code class="Nm">inetd</code> will continue to listen on the master
    socket for connections, so the server should not close it when it exits.
    <a class="Xr" href="../html8/identd.html">identd(8)</a> is usually the only
    stream server marked as wait.</p>
<p class="Pp">The <i class="Em">user</i> entry should contain the user name of
    the user as whom the server should run. This allows for servers to be given
    less permission than root. Optionally, a group can be specified by appending
    a colon to the user name, followed by the group name (it is possible to use
    a dot (``.'') in lieu of a colon, however this feature is provided only for
    backward compatibility). This allows for servers to run with a different
    (primary) group id than specified in the password file. If a group is
    specified and <i class="Em">user</i> is not root, the supplementary groups
    associated with that user will still be set.</p>
<p class="Pp">The <i class="Em">server-program</i> entry should contain the
    pathname of the program which is to be executed by
    <code class="Nm">inetd</code> when a request is found on its socket. If
    <code class="Nm">inetd</code> provides this service internally, this entry
    should be &#x201C;internal&#x201D;.</p>
<p class="Pp">The <i class="Em">server program arguments</i> should be just as
    arguments normally are, starting with argv[0], which is the name of the
    program. If the service is provided internally, the word
    &#x201C;internal&#x201D; should take the place of this entry. It is possible
    to quote an argument using either single or double quotes. This allows you
    to have, e.g., spaces in paths and parameters.</p>
</section>
<section class="Ss">
<h2 class="Ss" id="Key_Values_Notation"><a class="permalink" href="#Key_Values_Notation">Key-Values
  Notation</a></h2>
In key-values notation, keys are separated from their associated values by `=',
  values are separated by whitespace, and key-values options are separated by
  commas. A service definition is terminated by a semicolon. Multiple
  definitions may exist on a single line (and a line may end with a positional
  definition. A key-values definition has the following form:
<div class="Bd Pp Bd-indent">[listen-addr:]service-spec {on|off} &lt;option&gt;
  = [value1], &lt;option&gt; = [value1] [value2] ..., &lt;option&gt; =,
  ...;</div>
<p class="Pp">Values may be in quotes, and support the following escape
    sequences.</p>
<dl class="Bl-hang Bd-indent">
  <dt><b class="Sy">\\</b></dt>
  <dd>Backslash.</dd>
  <dt><b class="Sy">\n</b></dt>
  <dd>Line feed.</dd>
  <dt><b class="Sy">\t</b></dt>
  <dd>Tab.</dd>
  <dt><b class="Sy">\r</b></dt>
  <dd>Carriage return.</dd>
  <dt><b class="Sy">\'</b></dt>
  <dd>Single quote.</dd>
  <dt><b class="Sy">\&quot;</b></dt>
  <dd>Double quote.</dd>
  <dt><b class="Sy">\xXX</b></dt>
  <dd>Hexadecimal byte value, replace XX.</dd>
</dl>
<p class="Pp"><i class="Em">[listen-addr:]service-spec</i> has the same form as
    in positional notation. If <i class="Em">service-spec</i> is followed by
    <i class="Em">on</i> then the service definition is active by default. If
    <i class="Em">service-spec</i> is followed by <i class="Em">off</i> then the
    service definition is parsed and errors are output to the system log, but
    the service is not active and no sockets are created.</p>
<p class="Pp">Comments that exist between the initial on/off directive and the
    closing semicolon may begin in any column and may exist on the same line as
    non-comment text. Note: editor syntax highlighting may be misleading!</p>
<p class="Pp">Syntax and semantic error detection is performed on a best-effort
    basis. If an error with a service definition is easily detectable, it will
    log the error using <a class="Xr" href="../html3/syslog.html">syslog(3)</a>
    and continue reading the configuration file if possible, skipping the
    erroneous definition or file. Otherwise, it is up to the user to write
    definitions that conform to the documentation. Errors may be worded
    differently depending on the ordering of options in the service
  definition.</p>
<p class="Pp">The following are the available values for
    <i class="Em">&lt;option&gt;:</i></p>
<dl class="Bl-hang">
  <dt><b class="Sy">bind</b></dt>
  <dd>Set the listen address for this service. This can be an IPv4 or IPv6
      address or a hostname.</dd>
  <dt><b class="Sy">socktype</b></dt>
  <dd>Equivalent to <i class="Em">socket-type</i> in positional notation.
      <i class="Em">socktype</i> is optional if <i class="Em">protocol</i> is
      specified and is <code class="Li">udp{4,6}</code> or
      <code class="Li">tcp{4,6}</code>.</dd>
  <dt><b class="Sy">acceptfilter</b></dt>
  <dd>An accept filter, equivalent to <i class="Em">accept</i> in positional
      notation (see
      <a class="Xr" href="../html9/accept_filter.html">accept_filter(9)</a> and
      <code class="Dv">SO_ACCEPTFITLER</code> in
      <a class="Xr" href="../html2/setsockopt.html">setsockopt(2)</a>).</dd>
  <dt><b class="Sy">protocol</b></dt>
  <dd>Equivalent to <i class="Em">protocol</i> in positional notation. If
      specified as <code class="Li">tcp</code> or <code class="Li">udp</code>
      with no version specifier, the associated hostname or
      <i class="Em">bind</i> value is used to determine the IP version. If the
      version is not specified and the hostname string or <i class="Em">bind</i>
      value is not an IPv4 or IPv6 address, the service definition is
    invalid.</dd>
  <dt><b class="Sy">sndbuf</b></dt>
  <dd>Equivalent to <i class="Em">sndbuf</i> in positional notation.</dd>
  <dt><b class="Sy">recvbuf</b></dt>
  <dd>Equivalent to <i class="Em">recvbuf</i> in positional notation.</dd>
  <dt><b class="Sy">wait</b></dt>
  <dd>The value <code class="Li">yes</code> or <code class="Li">no</code>.
      Equivalent to <i class="Em">wait/nowait</i> in positional notation. This
      option is automatically determined for internal services, and is mandatory
      for all others.</dd>
  <dt><b class="Sy">service_max</b></dt>
  <dd>Equivalent to <i class="Em">max</i> in positional notation. Defaults to 40
      if not specified.</dd>
  <dt><b class="Sy">ip_max</b></dt>
  <dd>Specifies the maximum number of server instances that may be spawned from
      <code class="Nm">inetd</code> within an interval of 60 seconds for a given
      IP address. Other address types may also work if supported by
      <a class="Xr" href="../html3/getnameinfo.html">getnameinfo(3)</a>, test
      thoroughly using <code class="Fl">-d</code>. For example, connections from
      unnamed Unix sockets do not work, but connections from named Unix sockets
      may work. However, there is no way to only accept named Unix sockets.</dd>
  <dt><b class="Sy">user</b></dt>
  <dd>The user to run the program as. Equivalent to <i class="Em">user</i> in
      positional notation.</dd>
  <dt><b class="Sy">group</b></dt>
  <dd>The primary group to run the program as. Equivalent to
      <i class="Em">group</i> in positional notation.</dd>
  <dt><b class="Sy">exec</b></dt>
  <dd>The path to the program's executable or &#x201C;internal&#x201D; for a
      built-in service. If not specified, this will be assumed to be
      &#x201C;internal&#x201D; (and will fail if <i class="Em">socktype</i> is
      not specified).</dd>
  <dt><b class="Sy">args</b></dt>
  <dd>The program arguments. By convention, the first argument should be the
      name of the program.</dd>
  <dt><b class="Sy">ipsec</b></dt>
  <dd>An IPsec policy string. Defaults to the global default setting. If
      specified without a value (i.e., &#x201C;ipsec=,&#x201D;), IPsec will be
      disabled for this service. See the
      <a class="Sx" href="#Directives">Directives</a> section for details.
      Currently only one value is allowed, so all IPsec policies should be in a
      quoted string, separated by semicolons.</dd>
</dl>
</section>
<section class="Ss">
<h2 class="Ss" id="Directives"><a class="permalink" href="#Directives">Directives</a></h2>
&lt;listen-addr&gt;:
<p class="Pp">To avoid the need to repeat listen addresses over and over again,
    listen addresses are inherited from line to line, and the listen address can
    be changed without defining a service by including a line containing just a
    <i class="Em">listen-addr</i> followed by a colon. The default (compatible
    with historical configuration files) is *. To return to this behavior after
    configuring some services with specific listen addresses, give *
  explicitly.</p>
<p class="Pp"><code class="Li">#@</code> [&lt;IPsec policy&gt;] [; [&lt;IPsec
    policy&gt;]] ...</p>
<p class="Pp">The implementation includes a tiny hack to support IPsec policy
    settings for each socket. A special form of the comment line, starting with
    &#x201C;<code class="Li">#@</code>&#x201D;, is used as a policy specifier.
    The content of the above comment line will be treated as a IPsec policy
    string, as described in
    <a class="Xr" href="../html3/ipsec_set_policy.html">ipsec_set_policy(3)</a>.
    Multiple IPsec policy strings may be specified by using a semicolon as a
    separator. If conflicting policy strings are found in a single line, the
    last string will take effect. IPsec policy strings are not parsed in
    comments within a key-values service definition. A
    <code class="Li">#@</code> line affects all of the subsequent lines in the
    same config file, so you may want to reset the IPsec policy by using a
    comment line containing only <code class="Li">#@</code> (with no policy
    string).</p>
<p class="Pp">If an invalid IPsec policy string appears in a config file,
    <code class="Nm">inetd</code> logs an error message using
    <a class="Xr" href="../html3/syslog.html">syslog(3)</a> and stops reading
    the current config file, but may continue reading from other files not
    affected by the IPsec directive.</p>
<p class="Pp">.include &lt;glob-path&gt;</p>
<p class="Pp">Other files can be read by inetd by specifying an include
    directive in an inetd config file. <i class="Em">glob-path</i> is an
    absolute path or a path relative (including parent directories) to the
    directory containing the current config file, and may contain glob patterns
    as specified by <a class="Xr" href="../html7/glob.html">glob(7)</a>.</p>
<p class="Pp">To include a specific file, include the relative or absolute path
    of the file. To include all files in a directory,
    <i class="Em">glob-path</i> should be the directory of the files to include
    followed by &quot;/*&quot;.</p>
<p class="Pp">The listening address and IPsec configuration strings of the
    current config file are inherited by files included by this directive.</p>
<p class="Pp">Files included by this directive using a glob path match are not
    read in a specific order. If a specific order is desired, files or
    directories should be included individually without the use of glob
    patterns. Behavior is undefined if multiple include directives include the
    same file and this should be avoided. Circular references are caught by
    <code class="Nm">inetd</code>. Anything after <i class="Em">glob-path</i> on
    the same line is ignored. <i class="Em">glob-path</i> may be in quotes.</p>
</section>
<section class="Ss">
<h2 class="Ss" id="Internal_Services"><a class="permalink" href="#Internal_Services">Internal
  Services</a></h2>
<code class="Nm">inetd</code> provides several &#x201C;trivial&#x201D; services
  internally by use of routines within itself. These services are
  &#x201C;echo&#x201D;, &#x201C;discard&#x201D;, &#x201C;chargen&#x201D;
  (character generator), &#x201C;daytime&#x201D; (human readable time), and
  &#x201C;time&#x201D; (machine readable time, in the form of the number of
  seconds since midnight, January 1, 1900 GMT). For details of these services,
  consult the appropriate RFC.
<p class="Pp">TCP services without official port numbers can be handled with the
    RFC1078-based tcpmux internal service. TCPmux listens on port 1 for
    requests. When a connection is made from a foreign host, the service name
    requested is passed to TCPmux, which performs a lookup in the service name
    table provided by <span class="Pa">/etc/inetd.conf</span> and returns the
    proper entry for the service. TCPmux returns a negative reply if the service
    doesn't exist, otherwise the invoked server is expected to return the
    positive reply if the service type in
    <span class="Pa">/etc/inetd.conf</span> file has the prefix
    &#x201C;tcpmux/&#x201D;. If the service type has the prefix
    &#x201C;tcpmux/+&#x201D;, TCPmux will return the positive reply for the
    process; this is for compatibility with older server code, and also allows
    you to invoke programs that use stdin/stdout without putting any special
    server code in them. Services that use TCPmux are &#x201C;nowait&#x201D;
    because they do not have a well-known port number and hence cannot listen
    for new requests.</p>
<p class="Pp"><code class="Nm">inetd</code> rereads its configuration file when
    it receives a hangup signal, <code class="Dv">SIGHUP</code>. Services may be
    added, deleted or modified when the configuration file is reread.
    <code class="Nm">inetd</code> creates a file
    <i class="Em">/var/run/inetd.pid</i> that contains its process
  identifier.</p>
</section>
<section class="Ss">
<h2 class="Ss" id="libwrap"><a class="permalink" href="#libwrap">libwrap</a></h2>
Support for TCP wrappers is included with <code class="Nm">inetd</code> to
  provide internal tcpd-like access control functionality. An external tcpd
  program is not needed. You do not need to change the
  <span class="Pa">/etc/inetd.conf</span> server-program entry to enable this
  capability. <code class="Nm">inetd</code> uses
  <span class="Pa">/etc/hosts.allow</span> and
  <span class="Pa">/etc/hosts.deny</span> for access control facility
  configurations, as described in
  <a class="Xr" href="../html5/hosts_access.html">hosts_access(5)</a>.
<p class="Pp"><i class="Em">Nota Bene</i>: TCP wrappers do not affect/restrict
    UDP or internal services.</p>
</section>
<section class="Ss">
<h2 class="Ss" id="IPv6_TCP/UDP_behavior"><a class="permalink" href="#IPv6_TCP/UDP_behavior">IPv6
  TCP/UDP behavior</a></h2>
If you wish to run a server for both IPv4 and IPv6 traffic, you will need to run
  two separate processes for the same server program, specified as two separate
  lines in <span class="Pa">/etc/inetd.conf</span> using &#x201C;tcp4&#x201D;
  and &#x201C;tcp6&#x201D; respectively. In positional syntax, plain
  &#x201C;tcp&#x201D; means TCP on top of the current default IP version, which
  is, at this moment, IPv4.
<p class="Pp">Under various combination of IPv4/v6 daemon settings,
    <code class="Nm">inetd</code> will behave as follows:</p>
<ul class="Bl-bullet Bl-compact">
  <li>If you have only one server on &#x201C;tcp4&#x201D;, IPv4 traffic will be
      routed to the server. IPv6 traffic will not be accepted.</li>
  <li>If you have two servers on &#x201C;tcp4&#x201D; and &#x201C;tcp6&#x201D;,
      IPv4 traffic will be routed to the server on &#x201C;tcp4&#x201D;, and
      IPv6 traffic will go to server on &#x201C;tcp6&#x201D;.</li>
  <li>If you have only one server on &#x201C;tcp6&#x201D;, only IPv6 traffic
      will be routed to the server. The kernel may route to the server IPv4
      traffic as well, under certain configuration. See
      <a class="Xr" href="../html4/ip6.html">ip6(4)</a> for details.</li>
</ul>
</section>
</section>
<section class="Sh">
<h1 class="Sh" id="FILES"><a class="permalink" href="#FILES">FILES</a></h1>
<dl class="Bl-tag Bl-compact">
  <dt><span class="Pa">/etc/inetd.conf</span></dt>
  <dd>configuration file for all <code class="Nm">inetd</code> provided
    services</dd>
  <dt><span class="Pa">/etc/services</span></dt>
  <dd>service name to protocol and port number mappings.</dd>
  <dt><span class="Pa">/etc/protocols</span></dt>
  <dd>protocol name to protocol number mappings</dd>
  <dt><span class="Pa">/etc/rpc</span></dt>
  <dd>Sun-RPC service name to service number mappings.</dd>
  <dt><span class="Pa">/etc/hosts.allow</span></dt>
  <dd>explicit remote host access list.</dd>
  <dt><span class="Pa">/etc/hosts.deny</span></dt>
  <dd>explicit remote host denial of service list.</dd>
</dl>
</section>
<section class="Sh">
<h1 class="Sh" id="SEE_ALSO"><a class="permalink" href="#SEE_ALSO">SEE
  ALSO</a></h1>
<a class="Xr" href="../html5/hosts_access.html">hosts_access(5)</a>,
  <a class="Xr" href="../html5/hosts_options.html">hosts_options(5)</a>,
  <a class="Xr" href="../html5/protocols.html">protocols(5)</a>,
  <a class="Xr" href="../html5/rpc.html">rpc(5)</a>,
  <a class="Xr" href="../html5/services.html">services(5)</a>,
  <a class="Xr" href="../html8/comsat.html">comsat(8)</a>,
  <a class="Xr" href="../html8/fingerd.html">fingerd(8)</a>,
  <a class="Xr" href="../html8/ftpd.html">ftpd(8)</a>,
  <a class="Xr" href="../html8/rexecd.html">rexecd(8)</a>,
  <a class="Xr" href="../html8/rlogind.html">rlogind(8)</a>,
  <a class="Xr" href="../html8/rshd.html">rshd(8)</a>,
  <a class="Xr" href="../html8/telnetd.html">telnetd(8)</a>,
  <a class="Xr" href="../html8/tftpd.html">tftpd(8)</a>
<p class="Pp"><cite class="Rs"><span class="RsA">J. Postel</span>,
    <span class="RsT">Echo Protocol</span>, <span class="RsR">RFC</span>,
    <span class="RsN">862</span>, <span class="RsD">May 1983</span>.</cite></p>
<p class="Pp"><cite class="Rs"><span class="RsA">J. Postel</span>,
    <span class="RsT">Discard Protocol</span>, <span class="RsR">RFC</span>,
    <span class="RsN">863</span>, <span class="RsD">May 1983</span>.</cite></p>
<p class="Pp"><cite class="Rs"><span class="RsA">J. Postel</span>,
    <span class="RsT">Character Generator Protocol</span>,
    <span class="RsR">RFC</span>, <span class="RsN">864</span>,
    <span class="RsD">May 1983</span>.</cite></p>
<p class="Pp"><cite class="Rs"><span class="RsA">J. Postel</span>,
    <span class="RsT">Daytime Protocol</span>, <span class="RsR">RFC</span>,
    <span class="RsN">867</span>, <span class="RsD">May 1983</span>.</cite></p>
<p class="Pp"><cite class="Rs"><span class="RsA">J. Postel</span> and
    <span class="RsA">K. Harrenstien</span>, <span class="RsT">Time
    Protocol</span>, <span class="RsR">RFC</span>, <span class="RsN">868</span>,
    <span class="RsD">May 1983</span>.</cite></p>
<p class="Pp"><cite class="Rs"><span class="RsA">M. Lottor</span>,
    <span class="RsT">TCP port service Multiplexer (TCPMUX)</span>,
    <span class="RsR">RFC</span>, <span class="RsN">1078</span>,
    <span class="RsD">November 1988</span>.</cite></p>
</section>
<section class="Sh">
<h1 class="Sh" id="HISTORY"><a class="permalink" href="#HISTORY">HISTORY</a></h1>
The <code class="Nm">inetd</code> command appeared in
  <span class="Ux">4.3BSD</span>. Support for <i class="Em">Sun-RPC</i> based
  services is modeled after that provided by SunOS 4.1. Support for specifying
  the socket buffer sizes was added in <span class="Ux">NetBSD 1.4</span>. In
  November 1996, libwrap support was added to provide internal tcpd-like access
  control functionality; libwrap is based on Wietse Venema's tcp_wrappers. IPv6
  support and IPsec hack was made by KAME project, in 1999.
</section>
<section class="Sh">
<h1 class="Sh" id="BUGS"><a class="permalink" href="#BUGS">BUGS</a></h1>
Host address specifiers, while they make conceptual sense for RPC services, do
  not work entirely correctly. This is largely because the portmapper interface
  does not provide a way to register different ports for the same service on
  different local addresses. Provided you never have more than one entry for a
  given RPC service, everything should work correctly (Note that default host
  address specifiers do apply to RPC lines with no explicit specifier.)
<p class="Pp"><i class="Em">tcpmux</i> on IPv6 is not tested enough.</p>
<p class="Pp">For automatic IP version detection in key-values syntax (see the
    <i class="Em">protocol</i> key), addresses with an interface specifier in
    the form &lt;address&gt;%&lt;iface&gt; are not currently supported, as
    addresses of that form are not parsed by
    <a class="Xr" href="../html3/inet_pton.html">inet_pton(3)</a>.</p>
<p class="Pp">If a positional service definition has an invalid parameter and
    extends across multiple lines using tab characters, the subsequent lines
    after the error are treated as new service definitions.</p>
</section>
<section class="Sh">
<h1 class="Sh" id="SECURITY_CONSIDERATIONS"><a class="permalink" href="#SECURITY_CONSIDERATIONS">SECURITY
  CONSIDERATIONS</a></h1>
Enabling the &#x201C;echo&#x201D;, &#x201C;discard&#x201D;, and
  &#x201C;chargen&#x201D; built-in trivial services is not recommended because
  remote users may abuse these to cause a denial of network service to or from
  the local host.
</section>
</div>
<table class="foot">
  <tr>
    <td class="foot-date">October 12, 2021</td>
    <td class="foot-os">NetBSD 10.99</td>
  </tr>
</table>
</body>
</html>
